= Spring Cloud Client Server
honeymon, <ihoneymon@gmail.com>
v0.0.1, 2018/03/11

:app: 애플리케이션
:ctx: 컨텍스트
:spring: Spring
:sb: {spring} Boot
:sc: Spring Cloud
:scc: {sc} Config
:repo: 리파지토리

[[preface]]
== 서문
{scc} 서버는 {app}과 서비스의 모든 환경설정 속성정보를 저장하고 조회하고 관리할 수 있게 해주는 외부화된 환경설정 서버다.

환경설정 정보를 프로파일에 따라서 잘 구분한다해도 {app}과 함께 패키징된다. 환경설정 정보가 변경되면 다시 패키징해여 배포해야 한다.
이런 불편함을 해소하기 위해 환경설정 정보를 외부화하는 방법으로 원격지에 있는 깃 {repo}에서 {app} 환경설정 정보(``application.yml``
혹은 ``application.properties``)를 읽어오는 기능을 제공한다.

환경설정 서버는 환경설정 정보를 변경시 변동사항을 전파하며 프로파일 기능도 지원한다.

[NOTE]
====
{sc}는 {sb}와 다르게 부트스트랩 {ctx}를 생성한다. 외부에서 {app} {ctx}를 읽어와야 하기 때문으로 보인다. 그래서 ``Environment``에서는 두 가지
{ctx}(다른 {spring} {app}에서 사용하기 위한 외부 속성과 {scc}에서 자체사용하는 내부 속성)를 공유한다.

외부 속성이 내부 속성을 덮어쓰기 하지는 않는다.
====

{scc}가 부트스트랩 {ctx}을 생성하는 것에 맞춰 속성 파일도 ``bootstrap.yml`` 혹은 ``bootstrap.properties``를 사용한다.

[TIP]
====
{scc}를 참조하는 다른 서버를 위해 ``spring.applicatoin.name``을 설정하는 것은 좋은 방법이라고 한다.
====


== 예제
구성은 간단하게 시작한다.

.``build.gradle``
[source,groovy]
----
buildscript {
	ext {
		kotlinVersion = '1.2.20'
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'io.honeymon.msa'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
}


ext {
	springCloudVersion = 'Finchley.M8'
}

dependencies {
	compile('org.springframework.cloud:spring-cloud-config-server') // <1>
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
----
<1> {scc} 구성을 위해서 필요한 의존성 정의는 이거 한줄이다.

.``ConfigServerApplication.kt``
[source,kotlin]
----
@EnableConfigServer
@SpringBootApplication
open class ConfigServerApplication // <1>

fun main(args: Array<String>) {
    runApplication<ConfigServerApplication>(*args)
}
----
<1> ``class`` 앞에 ``open`` 선언을 해야 한다.

[NOTE]
====
코틀린도 사용해볼겸 언어로 선택했다. 코드가 간결하다.
====

[TIP]
====
코틀린 클래스는 기본적으로 ``final`` 상태라고 한다. ``@Configuration`` 클래스는 ``final``이면 안된다.
====

.``bootstrap.yml``
[source,yaml]
----
#Spring Cloud Config Server config file
server.port: 8888   # <1>
spring:
  application:
    name: Spring Cloud Server of Honeymon
  cloud:
    config:
      server:
        git: #private 인 경우에는 어떻게 해야해?
          uri: https://github.com/ihoneymon/msa-training-config-repo <2>
----
<1> {scc} 기본포트는 ``8888`` 이다.
<2> ``spring.cloud.config.server.git.uri`` 속성을 통해 깃헙 {repo} ``https://github.com/ihoneymon/msa-training-config-repo`` 지정

원격지 {repo}에 link:https://github.com/ihoneymon/msa-training-config-repo/blob/master/application.yml[``application.yml``(https://goo.gl/rR2o4w)] 구성은 다음과 같다:

[source,properties]
----
#Properties for Config Server
owner: honeymon
blog:
  github: http://honeymon.io
  java: http://java.ihoney.pe.kr
  life: http://ihoney.pe.kr
----

이제 {scc} 서버를 구동하고 제대로 읽어왔는지 확인해보자.

``http://localhost:8888/actuator/env`` 으로 접근하면 {scc} 서버 애플리케이션 환경설정 정보를 확인할 수 있다.

[source, json]
----
{
  "name": "actuator",
  "profiles": [
    "env"
  ],
  "label": null,
  "version": "a0ec6a3fec7e5a27ed63af8123a1d3272b8d4db6",
  "state": null,
  "propertySources": [
    {
      "name": "https://github.com/ihoneymon/msa-training-config-repo/application.yml",
      "source": {
        "owner": "honeymon",
        "blog.github": "http://honeymon.io",
        "blog.java": "http://java.ihoney.pe.kr",
        "blog.life": "http://ihoney.pe.kr"
      }
    }
  ]
}
----
<1> ``bootstrap.yml`` 에서 ``spring.cloud.config.server.git.uri``으로 정의한 원격지 {repo} 파일 정보

{app}에 제공할 프로파일별로 별도의 깃 {repo}(환경 {repo}, Environment Repository)를 생성해야하는 것으로 보인다.

다른 클라이언트에서 접근하는 URL은 ``http://localhost:8888/application/default`` 이며 이 접근 URL은 목적에 따라 다음과 같은 변경이 가능하다:

[NOTE]
====
외부에서 다른 {app}에서 접근은 다음 URL 자원에 대해 접근가능하다:

* ``/{application}/{profile}[/{label}]``
* ``/{application}-{profile}.yml``
* ``/{label}/{application}-{profile}.yml``
* ``/{application}-{profile}.properties``
* ``/{label}/{application}-{profile}.properties``
====

[NOTE]
====
{spring} 환경에서 별도의 프로파일을 지정하지 않으면 ``default``다.
====


[[summary]]
== 정리
* {scc} 구성은 간결하다.
* {scc} 서버가 참조하는 깃헙 {repo}는 배포 환경에 따라 각기 다른 {repo}를 사용해야 한다.
** 프로파일 구분은 지원할 것으로 보인다.
* 다음은 Spring Cloud Config Client 이려나?


[[appendix]]
== 부록
* link:https://cloud.spring.io/spring-cloud-static/spring-cloud.html[Spring Cloud Reference Guide]
* link:https://cloud.spring.io/spring-cloud-static/spring-cloud.html#_environment_repository[Environment Repository]